#!/usr/bin/env bash
set -Eeuo pipefail
trap 'ec=$?; echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO cmd=$BASH_COMMAND";
      exit $ec;' ERR

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }

elapsed_start=$(date +%s)
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }
#
####################################################################

jlcpcb_zip() {
    local pcbname="$1"
    local outdir="$2"
    (
        cd $outdir
        rm -f ../"$pcbname"-jlcpcb.zip
        #   We disable ZIP compression because that will make Git's
        #   compression of the file as it changes much worse.
        zip  -q -0 ../"$pcbname"-jlcpcb.zip    \
            *.g[tb]o *.g[tb]s *.g?l         \
            *.gm1                           \
            *.drl *-drl_map.gbr             \
            #
    )
}

####################################################################

export REPO=$(cd "$(dirname "$0")" && pwd -P)
cd "$REPO"

kicad-cli --version >/dev/null 2>&1 || die 3 "kicad-cli command not found"
kicad-cli --version >kicad-version

for sch in */kicad/*.kicad_sch; do
    projdir=$(dirname $(dirname "$sch"))
    basename=$(basename "$sch" .kicad_sch)
    #   Creates any dirs needed for output path.
    kicad-cli sch export pdf \
        --output "$projdir/render/$basename-sch.pdf"  \
        "$sch"
    #   KiCad always sets the creation date to the current time, which
    #   means that this file will be a changed version every time we
    #   re-run the export, even if nothing in the schematic has actually
    #   changed. We delete this line so that we don't get a pile of
    #   "updated" PDFs every time this is run. (Note that this tag being
    #   bookended by newlines is what KiCad does, but the newlines are
    #   not a necessary part of PDF syntax.)
    sed -i -e '/^\/CreationDate (D:..............)$/d' \
        "$projdir/render/$basename-sch.pdf"
done

for pcb in romext-2364/kicad/*.kicad_pcb; do
    pcbname=$(basename "$pcb" .kicad_pcb)
    [[ $pcbname = _autosave-* ]] && continue
    proj=$(dirname "$(dirname "$pcb")")
    outdir="$proj/render/$pcbname-gerber"
    rm -rf "$outdir"
    #   Generates all layers, whether needed or not.
    kicad-cli pcb export gerbers \
        --output "$outdir" "$pcb"
    #   The KiCad defaults match what JLCPCB asks for, excepting that
    #   JLCPCB suggests adding GerberX2 drill maps in as well.
    kicad-cli pcb export drill \
        --generate-map --map-format gerberx2 \
        --output "$outdir" "$pcb"
    #   Build ZIP files for submission to fabs.
    jlcpcb_zip "$pcbname" "$outdir"
done

echo "OK ($(elapsed)s)"
