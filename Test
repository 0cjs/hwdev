#!/usr/bin/env bash
set -Eeuo pipefail
trap 'ec=$?; echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO cmd=$BASH_COMMAND";
      exit $ec;' ERR

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }

elapsed_start=$(date +%s)
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }

####################################################################

export REPO=$(cd "$(dirname "$0")" && pwd -P)
cd "$REPO"

#   We need this to run design checks, even if we don't use `render`.
kicad-cli --version >/dev/null 2>&1 || die 3 "kicad-cli command not found"
kicad-cli --version >kicad-version  # In $REPO; also done by `render`

#   XXX Should do design checks here.

#   We automatically render everything only if we're on the `main` branch.
#   Dev branches are often full of WIP commits where rendering every change
#   would only get in the way. This means that dev branches should be
#   brought on to the local `main` and `Test` run before pushing, rather
#   than using `push origin @:main`.
if [[ refs/heads/main != $(git rev-parse --symbolic-full-name @) ]]; then
    echo 'WARNING: not on main; skipping render'
else
    mkdir -p $REPO/.build/
    echo "───── Rendering (stdout in .build/render.log)"
    bin/render */kicad/*.kicad_{sch,pcb} > "$REPO/.build/render.log" || fail
fi

echo "OK ($(elapsed)s)"
