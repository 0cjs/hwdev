#!/usr/bin/env bash
#
#   render - Generate PDF schematics and Gerber PCB layouts
#
#   This takes .kicad_sch and .kicad_pcb files as parameters. It updates
#   the rendered files only if they differ in something other than the
#   creation date so that spurious changes are not generated in Git
#   commits.
#
set -Eeuo pipefail
trap 'ec=$?; echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO cmd=$BASH_COMMAND";
      exit $ec;' ERR

#   Ensure we have consistent sorting of filenames for any programs
#   that use locale-based sorting, regardless of user's locale.
#   (Bash sorts glob/pathname expansions using LC_COLLATE.)
export LC_COLLATE=C

projdir=$(builtin cd "$(dirname "$0")" && pwd -P)
render_tmp="$projdir/.build/tmp/render"

####################################################################
#   Support functions

die() { ec=$1; shift; echo 1>&2 "$(basename "$0"):" "$@"; exit $ec; }

check_command() {
    "$@" >/dev/null || die 3 "Cannot run '$1'. Install package?"
}

clear_render_tmp() {
    rm -rf "$render_tmp"
    mkdir -p "$render_tmp"
}

#   The first two arges are source and target dirs; the remainder are
#   regexps (pass these single-quoted). Each file in the source dir will be
#   compared against a file of the same name in the target dir and, if
#   there are any differences that are not ignored by the regexps, the
#   source file will be copied over the target file. (If the target file
#   does not exist, the copy will always be done.)
copy_nonignored_diff() {
    local sourcedir="$1"; shift
    local targetdir="$1"; shift
    #   Remaining args are `git --ignore-matching-lines` patterns.
    local sourcefile targetfile

    echo "Output directory: $targetdir/"
    mkdir -p "$targetdir"
    for sourcefile in "$sourcedir"/*; do
        targetfile="$outdir/$(basename "$sourcefile")"
        #   The -a is required for this to work with files that `git diff`
        #   thinks are binary, even though we don't show output.
        if    ! [[ -e $targetfile ]] \
           || ! git diff -a --no-index --output=/dev/null \
                "$sourcefile" "$targetfile" \
                "${@/#/--ignore-matching-lines=}"
        then
            echo "Updating $(basename "$targetfile")"
            cp "$sourcefile" "$targetfile"
        fi
    done
}

####################################################################
#   Rendering functions

render_sch() {
    local path="$1"; shift
    echo "───── Rendering $(basename "$path")"
    local name=$(basename "$path" .kicad_sch)
    local srcdir=$(dirname "$path")
    local outdir="$srcdir"/../render

    clear_render_tmp
    kicad-cli sch export pdf --output "$render_tmp/$name-sch.pdf" "$path"
    copy_nonignored_diff "$render_tmp" "$outdir" \
        '^/CreationDate \(D:..............\)$' \
        #
}

render_pcb() {
    local path="$1"; shift
    echo "───── Rendering $(basename "$path")"
    pcbname=$(basename "$path" .kicad_pcb)
    local srcdir=$(dirname "$path")
    local outdir="$srcdir/../render/$pcbname-gerber"

    clear_render_tmp

    #   Generates all layers, whether needed or not.
    kicad-cli pcb export gerbers --output "$render_tmp" "$path"
    #   The KiCad defaults match what JLCPCB asks for, excepting that
    #   JLCPCB suggests adding GerberX2 drill maps in as well.
    kicad-cli pcb export drill \
        --generate-map --map-format gerberx2 \
        --output "$render_tmp" "$path"
    copy_nonignored_diff "$render_tmp" "$outdir" \
        '^%TF\.CreationDate,20' \
        '^G04 Created by KiCad .* date 20' \
        '^    "CreationDate": "20' \
        '^; DRILL file \{.*\} date 20' \
        '^; #@! TF\.CreationDate,20' \
        #

    #   Build ZIP files for submission to fabs.
    jlcpcb_zip "$pcbname" "$outdir"
}

jlcpcb_zip() {
    local pcbname="$1"
    local outdir="$2"
    (
        cd $outdir
        #   We need to start without an existing ZIP file because otherwise
        #   ZIP will add updates to the existing file, which produces a
        #   different result from creating a fresh file.
        rm -f ../"$pcbname"-jlcpcb.zip
        #   We disable ZIP compression because that will make Git's
        #   compression of the file as it changes much worse.
        zip  -q -0 ../"$pcbname"-jlcpcb.zip    \
            *.g[tb]o *.g[tb]s *.g?l         \
            *.gm1                           \
            *.drl *-drl_map.gbr             \
            #
        strip-nondeterminism ../"$pcbname"-jlcpcb.zip
    )
}

####################################################################
#   Main

check_command git --version
check_command kicad-cli --version
check_command strip-nondeterminism -V

kicad-cli --version >kicad-version
for arg in ${@}; do case "$arg" in
    *.kicad_sch)    render_sch "$arg";;
    *.kicad_pcb)    render_pcb "$arg";;
    *)              die 2 "Unknown file type: $arg"
esac; done
